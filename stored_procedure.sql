CREATE OR REPLACE PROCEDURE UPDATE_DOW30_SP()
  RETURNS STRING
  LANGUAGE SQL
  EXECUTE AS CALLER
AS
$$
BEGIN
  -- Step 1: Insert new records into the daily performance table
  INSERT INTO ANALYTICS_DOW30.DAILY_PERFORMANCE_METRICS
  SELECT
    INDEX_NAME,
    DATE,
    CLOSE,
    LAG(CLOSE) OVER (PARTITION BY INDEX_NAME ORDER BY DATE) AS PREV_CLOSE,
    CASE
      WHEN LAG(CLOSE) OVER (PARTITION BY INDEX_NAME ORDER BY DATE) = 0 
      THEN NULL 
      ELSE (CLOSE - LAG(CLOSE) OVER (PARTITION BY INDEX_NAME ORDER BY DATE)) / LAG(CLOSE) OVER (PARTITION BY INDEX_NAME ORDER BY DATE) 
    END AS DAILY_RETURN
  FROM
    HARMONIZED_DOW30.DOW30_HARMONIZED
  WHERE
    DATE > (SELECT MAX(DATE) FROM ANALYTICS_DOW30.DAILY_PERFORMANCE_METRICS)
    AND DATE IS NOT NULL;

  -- Step 2: Update weekly performance metrics table
  CREATE OR REPLACE TABLE ANALYTICS_DOW30.WEEKLY_PERFORMANCE_METRICS AS
  SELECT
    INDEX_NAME,
    DATE_TRUNC('WEEK', DATE) AS WEEK_START_DATE,
    FIRST_VALUE(CLOSE) OVER (PARTITION BY INDEX_NAME, DATE_TRUNC('WEEK', DATE) ORDER BY DATE) AS WEEK_START_PRICE,
    LAST_VALUE(CLOSE) OVER (PARTITION BY INDEX_NAME, DATE_TRUNC('WEEK', DATE) ORDER BY DATE ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS WEEK_END_PRICE,
    CASE 
      WHEN FIRST_VALUE(CLOSE) OVER (PARTITION BY INDEX_NAME, DATE_TRUNC('WEEK', DATE) ORDER BY DATE) = 0 
      THEN NULL 
      ELSE (LAST_VALUE(CLOSE) OVER (PARTITION BY INDEX_NAME, DATE_TRUNC('WEEK', DATE) ORDER BY DATE ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) 
            - FIRST_VALUE(CLOSE) OVER (PARTITION BY INDEX_NAME, DATE_TRUNC('WEEK', DATE) ORDER BY DATE)) / FIRST_VALUE(CLOSE) OVER (PARTITION BY INDEX_NAME, DATE_TRUNC('WEEK', DATE) ORDER BY DATE)
    END AS WEEKLY_RETURN
  FROM
    HARMONIZED_DOW30.DOW30_HARMONIZED
  WHERE
    DATE IS NOT NULL;

  -- Return a message indicating that the update was successful
  RETURN 'Incremental update and transformation completed successfully';
END;
$$;


CALL UPDATE_DOW30_SP();

SELECT * FROM ANALYTICS_DOW30.DAILY_PERFORMANCE_METRICS LIMIT 10;

SELECT * FROM ANALYTICS_DOW30.WEEKLY_PERFORMANCE_METRICS LIMIT 10;
